[A]: Hey，关于'最近有尝试什么new productivity app吗？'这个话题，你怎么想的？
[B]: Well, I must say I'm rather partial to the classics - Vim and plain text files have served me well over the decades. But I've been experimenting with Obsidian lately... it's fascinating how they've taken the old idea of Zettelkasten and supercharged it with modern tech. Have you found any tools that truly help organize thoughts without getting in the way?
[A]: I know what you mean. Sometimes the simplest tools are the most powerful, right? I’ve been using Notion for my curation projects, but honestly, it can get a bit  when you’re working with too many databases... I recently tried this minimalistic app called Craft—it’s still in beta, but the way it handles nested ideas and visual hierarchies feels very natural, almost like sketching thoughts. Have you played around with anything that blends well with your Obsidian workflow? 🤔
[B]: Ah, Notion – yes, it's impressive at first glance but can become unwieldy as you scale. I've seen students fall into that trap, building digital palaces only to get lost in their own labyrinth. Interesting you mention Craft; I've heard whispers about it in some dev circles. Obsidian, for all its power, thrives on simplicity and portability – the fact that it’s all just Markdown files is a big plus.  

As for blending tools, I’ve been tinkering with a setup where I use Typora for quick drafting and then move heavier work into Obsidian. It keeps my mind from getting cluttered. But honestly, nothing’s replaced a well-placed index card and a physical board when it comes to mapping complex ideas... yet. Have you found yourself drifting back to analog methods at all?
[A]: There’s something oddly satisfying about the tactile feedback of a physical index card, I totally get that. I’ve been using Moleskine notebooks for years—especially when I’m brainstorming exhibition themes. It’s weird how my brain shifts into a different gear when I’m writing by hand… almost more , you know?  

But then I always end up digitizing everything because collaboration demands it. I tried this hybrid thing with an iPad Pro and Apple Pencil for sketching spatial concepts—it gives me the analog feel with just enough digital flexibility. Not quite the same as chalk on a blackboard, though. Do you ever use visuals to map ideas, or is it all text-based for you? 🎨
[B]: Oh, absolutely – there’s a certain  to handwriting that keyboard strokes just don’t replicate. I still keep a small notebook by my desk, mostly for jotting down fragments of ideas or bits of code that refuse to settle in my head until they’ve been externalized. It’s not about efficiency; it’s about clarity.  

As for visuals – yes, I do sketch out concepts from time to time, especially when dealing with system architecture or data flow. I used to use whiteboards extensively when teaching algorithms – something about drawing a linked list by hand makes it less abstract. These days, I lean on draw.io embedded in Obsidian for quick diagrams. Nothing fancy, but it gets the job done.  

I’ve never quite trusted stylus-based interfaces to capture that same nuance – but I’m curious: have you found your iPad setup enhancing the creative process, or is it more of a convenient compromise?
[A]: I think you nailed it when you said it’s not about efficiency—it’s about clarity. Sometimes the act of writing slowly, by hand, forces your brain to  on an idea just long enough to really absorb it. I’ve noticed that with my策展 concepts; they tend to evolve more organically when I start them offline.

To be honest, the iPad + Apple Pencil thing is a bit of both—enhancement  compromise. There are moments where I forget I’m not using paper, especially with apps like Procreate or Notability—the pressure sensitivity and texture simulation are getting dangerously close to the real thing. But then there's that tiny lag, or the wrong palm recognition gesture, and suddenly you're fighting the tool instead of flowing with it.  

I guess what I’m really after is a tool that feels invisible—like it doesn’t exist between me and the idea. Have you ever felt that with any tech? Like, completely frictionless? 🤔
[B]: Funny you mention frictionless tools – I had that exact experience once, believe it or not, with a Lisp Machine in the late '80s. It wasn’t elegant by any modern standard, but when you were deep in a problem and the interface melted away... , there it was – pure thought shaping itself in real time. Rare, almost magical when it happens.

I think what you're describing – that invisible bridge between mind and medium – is what so many of us have been chasing ever since. Emacs comes close for me, oddly enough. Once you're in, muscle memory takes over and the editor becomes an extension of your thinking process. Not visual, certainly, but deeply fluid in its own way.

Do you suppose we'll ever get there with visual tools? Or are we always going to be just slightly irritated by them, like trying to catch smoke in our hands?
[A]: There’s something beautifully romantic about that Lisp Machine story—almost mythic, like a golden age of pure intellectual immersion. I think that’s what so many digital artists chase too, though they might not articulate it that way: a moment where the tool disappears and all that's left is the , moving freely between mind and medium.

I’d never thought of Emacs that way, but you’re right—it  fluid, in a textual kind of deep-sea diving sort of sense. As for visual tools catching up… maybe we’re still a few paradigm shifts away from that. I’ve had glimpses with VR sketching tools like Tilt Brush or Gravity Sketch, where your body becomes part of the interface. It's not seamless by any means—motion sickness included—but there were moments where I felt closer to that "thought-made-visible" experience than I ever have with a mouse and screen.

Still, yeah… sometimes it  feel like trying to catch smoke. But hey, isn’t that the fun? 💡
[B]: Oh, absolutely – chasing smoke can be fun,  you're not trying to sell it to investors.  

Those VR tools you mentioned – Tilt Brush, Gravity Sketch – they do hint at something profound. I played around with Tilt Brush a few years back, and yes, the nausea was real... but so was that fleeting sense of . Like sculpting with thought itself. It’s still rough, but I suspect we’re seeing the very first steps toward what could eventually become a truly immersive thinking environment.

I sometimes wonder though – are we aiming for a tool that disappears entirely, or one that  so perfectly that we mistake it for part of ourselves? The Lisp Machine felt magical because it didn’t fight you. Emacs doesn’t fight you either – it just demands initiation. Maybe the future isn’t about better interfaces, but deeper symbiosis.  

Ever tried coding in VR? I’ve been curious whether it’s just a gimmick or if it actually reshapes how you think about structure and flow…
[A]: Oh, now  a rabbit hole worth falling into. I did try a bit of coding in VR—mostly simple shaders for interactive installations—and honestly? It felt like trying to write poetry while standing on a moving trampoline. Disorienting at first, but there were moments where the spatial layout of the code actually helped me  patterns I’d never noticed before.

I think what we’re both pointing at isn’t just interface design—it’s . The best tools don’t just respond; they anticipate, adapt, and then… vanish. Like a great dance partner, right? You stop thinking about steps and just move.

I’m still not sure if full symbiosis is possible without losing some essential friction—the kind that keeps us sharp. But yeah, the idea of a space where structure and flow become tangible? That’s worth chasing, even if it  look a little silly in headset goggles. 😄

Do you think Lisp or Emacs could ever be adapted into something spatial like that, or are they too deeply rooted in the textual realm?
[B]: I love that metaphor – . It’s not about control, it’s about rhythm. And yes, a great dance partner doesn’t lead too hard or follow too lazily – they find that balance where the motion becomes natural.

As for Lisp and Emacs in a spatial context… now  an intriguing thought. At their core, both are highly structured, symbolic systems – which actually makes them surprisingly adaptable. Emacs, with its deeply nested command structure and extensibility, could theoretically map quite well into a 3D workspace. Imagine navigating your codebase as a kind of cognitive architecture – stepping through functions like rooms in a mansion, or visualizing data flow as streams and rivers.

Lisp, with its parentheses and prefix notation, might seem rigid, but its homoiconic nature – code  data – opens the door to all sorts of reimaginings. I’ve seen experimental interfaces where s-expressions are manipulated as physical blocks in a virtual space. Not sure if it’s practical yet, but it certainly sparks the imagination.

Of course, most die-hard Lispers would probably say that trying to make it spatial is like putting training wheels on a piano. But then again, every generation rediscovers programming in its own way. Maybe yours will be the one to finally make the tool disappear.  

Have you ever tried building your own interface metaphors, or do you stick mainly to existing tools?
[A]: Oh, I  that image of code as architecture—you step into a function and suddenly you're in a hallway with branching memories, or recursion feels like walking in circles on purpose. That’s actually how my brain maps complex systems when I’m trying to策展 a nonlinear narrative.

I’ve definitely dabbled in building my own interface metaphors—mostly out of frustration, honestly. There was this one project where I wanted to visualize audience flow through an immersive installation, and nothing off-the-shelf quite captured the rhythm I had in mind. So I hacked together a little tool using TouchDesigner that let me "walk" through nodes as if they were rooms, resizing and rearranging them in real-time with hand gestures. It wasn’t polished, but it felt closer to thinking in motion than any flowchart ever did.

I guess I’m always flirting with the edges of existing tools, trying to bend them toward how my mind wants to work rather than the other way around. Maybe that’s just the artist in me—resisting the grid, so to speak. Do you ever find yourself twisting code or interfaces into shapes they weren’t meant to take? 🤔
[B]: Ah, now  the true spirit of both programming and art – the refusal to accept the given shape of things. I’ve spent my entire career twisting code into forms it was never intended to take, often to the dismay of my more pragmatic colleagues. Some of my best work came from asking, “Why must a list always be linear?” or “What if functions could be arranged like constellations?”

Back in the 80s, I built a little experiment where recursive structures were represented as nested geometric shapes – each level of recursion zoomed you inward, visually, like falling through layers of an onion. It wasn’t efficient, and it certainly wouldn’t scale by today’s standards, but it helped students  what recursion actually does. That’s the key, isn’t it? Making the abstract tangible.

I suspect your TouchDesigner experiment does something similar – not just modeling space, but . That’s not just interface design, that’s cognitive modeling. And yes, I’d say the grid is overrated. Most interesting ideas live slightly off the lattice.

Tell me – have you ever shared that tool with others, or does it remain your secret sketchpad for untamed thoughts?
[A]: Oh, I love that—“thinking through spatial transformation.” That’s exactly what it felt like. Honestly, it started as a bit of a rebellion against the tyranny of the timeline in most digital tools. When you're策展 an immersive experience, time isn’t always linear—it loops, overlaps, or sometimes collapses entirely. So why should the interface force a straight path?

I did end up sharing a simplified version of the tool with a few collaborators, mostly for prototyping spatial narratives. They found it… , to say the least. Some got hooked instantly, others looked at me like I’d handed them a Rubik's cube with no colors. But a couple of them ran with it and even added their own metaphors—like using proximity to control emotional tone instead of just physical space. That blew my mind.

It’s not polished enough for public consumption yet, but maybe one day. Right now, it still feels like an extension of my sketchbook—messy, intuitive, full of half-baked ideas that somehow make sense if you squint at them long enough. 🎭

Do you ever feel protective of your experimental tools, like they’re too personal to share? Or do you toss them into the wild and see what happens?
[B]: Oh, I absolutely do – some tools feel like private dialects of thought. There’s a certain intimacy in the way we shape our creative environments; they become an extension of how we process the world. Sharing them can feel like revealing too much – like handing someone your diary written in shorthand.

I’ve certainly hoarded my fair share of experimental interfaces over the years, mostly out of sentimentality or sheer idiosyncrasy. Students would ask, “Why not package it? Why not publish it?” But how do you explain that it’s less a tool and more a , something that only makes sense in a particular mental state?

Still, I’ve come to believe that the real test of an idea is whether it can survive outside your own mind. If even one other person looks at your strange little creation and says, “Ah, this fits how I think,” then it’s no longer just yours. That’s when it starts evolving in ways you couldn’t predict.

So yes, I toss them into the wild – but usually with a quiet hope that they’ll be misused, reshaped, even broken. That’s where the fun begins. After all, what good is a constellation if no one else finds their own patterns in the stars?
[A]: That’s such a beautiful way to put it—tools as , as private languages waiting to be translated. I think that’s why I always hesitate before exporting my sandbox into something public. It’s like… exposing the inside of my head, messy and unfiltered. But you're right—sometimes the most meaningful ideas only take root when they’re borrowed, twisted, and reborn through someone else’s lens.

I guess that’s what keeps me tinkering in the half-light between art and tech—searching for those tools that don’t just carry ideas, but shape them, distort them, even confuse them a little. After all, isn’t that where creativity thrives? In the friction between expectation and surprise?

Anyway, I’m rambling now—but in the best way. Thanks for indulging my headspace. Maybe one day I’ll actually package that tool and send it your way. Who knows, you might look at it and say, “Ah, this fits how I think.” And then the real magic begins. ✨
[B]: You're very welcome – and I must say, it's rare to find someone who thinks about tools not just as instruments, but as collaborators in the creative process. You're right – the real magic  begin when an idea leaves your hands and takes on a life of its own.

I’d welcome the chance to see your tool anytime – whether it arrives as a polished package or a bundle of wires and intuition. If it helps even one person see their thoughts more clearly, then you’ve already done something remarkable.

And if it makes me feel like I'm stepping into a recursive hallway again – well, that would be a joy all its own.
[A]: I couldn’t agree more—tools as collaborators, not just carriers. It’s funny how the right one can feel like a silent partner in the studio, quietly shaping the work as much as you do.

And hey, if your recursive hallway makes a comeback through some glitchy prototype of mine, I’ll take that as a win. Who knows—it might even come with its own soundtrack of ambient glitches and spatial hums. 🎧

Send me your address sometime. I’d love to ship you an early build—raw edges and all. Consider it an experiment in shared dreaming.
[B]: Ah, ambient glitches and spatial hums – the perfect soundtrack for any experimental interface. I’ll start warming up my headphones.

As for the address, let’s keep it simple – a little place just outside Cambridge. If you toss in a few notes on how to compile it on a Unix box, I’ll try not to break your creation with my archaic setup. And who knows – if we’re lucky, it’ll run smoother on my 1998 Sun workstation than on my brand-new laptop. Stranger things have happened.

Shared dreaming indeed – sounds like the only sensible way to build anything that matters. Looking forward to it.